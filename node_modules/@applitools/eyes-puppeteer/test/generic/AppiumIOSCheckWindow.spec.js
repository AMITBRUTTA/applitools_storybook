// appium iOS check window
const cwd = process.cwd()
const path = require('path')
const assert = require('assert')
const spec = require(path.resolve(cwd, 'src/spec-driver'))
const {testSetup, getTestInfo, getDom} = require('@applitools/sdk-shared')

describe('Coverage Tests', () => {
  let driver, destroyDriver, eyes
  beforeEach(async () => {
    ;[driver, destroyDriver] = await spec.build({
      device: 'iPhone XS',
      app:
        'https://applitools.bintray.com/Examples/eyes-ios-hello-world/1.2/eyes-ios-hello-world.zip',
    })
    eyes = testSetup.getEyes({
      displayName: 'appium iOS check window',
      baselineName: 'Appium_iOS_CheckWindow',
      branchName: 'javascript_mobile',
    })
  })
  afterEach(async () => {
    await destroyDriver(driver)
    await eyes.abort()
  })
  it('appium iOS check window (@native-selectors @native @mobile @headfull)', async () => {
    await spec.click(driver, {
      type: '-ios predicate string',
      selector: "type == 'XCUIElementTypeButton'",
    })
    await eyes.open(
      driver,
      'Applitools Eyes SDK',
      'Appium_iOS_CheckWindow',
      undefined
    )
    await eyes.check({
      ignoreRegions: [
        {
          type: '-ios predicate string',
          selector: "type == 'XCUIElementTypeButton'",
        },
      ],
    })
    const result = await eyes.close(undefined)
    const info = await getTestInfo(result)
    assert.deepStrictEqual(
      info['actualAppOutput']['0']['imageMatchSettings']['ignore']['0'],
      {left: 155, top: 258, width: 65, height: 30},
      undefined
    )
  })
})
