// should send dom and location when check window fully
const cwd = process.cwd()
const path = require('path')
const assert = require('assert')
const spec = require(path.resolve(cwd, 'src/spec-driver'))
const {testSetup, getTestInfo, getDom} = require('@applitools/sdk-shared')

describe('Coverage Tests', () => {
  let driver, destroyDriver, eyes
  beforeEach(async () => {
    ;[driver, destroyDriver] = await spec.build({browser: 'chrome'})
    eyes = testSetup.getEyes({
      displayName: 'should send dom and location when check window fully',
      baselineName: 'ShouldSendDomAndLocationWhenCheckWindowFully',
    })
  })
  afterEach(async () => {
    await destroyDriver(driver)
    await eyes.abort()
  })
  it('should send dom and location when check window fully', async () => {
    await spec.visit(
      driver,
      'https://applitools.github.io/demo/TestPages/FramesTestPage/'
    )
    await eyes.open(
      driver,
      'Applitools Eyes SDK',
      'ShouldSendDomAndLocationWhenCheckWindowFully',
      {width: 700, height: 460}
    )
    await spec.executeScript(driver, 'window.scrollTo(0, 350)', ...[])
    await eyes.check({isFully: true})
    const result = await eyes.close(false)
    const info = await getTestInfo(result)
    assert.deepStrictEqual(
      info['actualAppOutput']['0']['image']['location'],
      {x: 0, y: 0},
      undefined
    )
    assert.deepStrictEqual(
      info['actualAppOutput']['0']['image']['hasDom'],
      true,
      undefined
    )
    const dom = await getDom(
      result,
      info['actualAppOutput']['0']['image']['domId']
    )
    assert.deepStrictEqual(
      dom['attributes']['data-applitools-scroll'],
      'true',
      undefined
    )
  })
})
